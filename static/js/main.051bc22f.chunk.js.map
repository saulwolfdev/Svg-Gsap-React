{"version":3,"sources":["Svg/Elaboracion/Sol.svg","Svg/Elaboracion/Captus1.svg","Svg/Elaboracion/Bandeja.svg","Svg/Elaboracion/Captus2.svg","Svg/Elaboracion/Captus3.svg","Svg/Elaboracion/Linea.svg","Svg/Elaboracion/Planta.svg","Animation/Elaboracion.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Elaboracion","props","Sol","Captus1","Bandeja","Captus2","Captus3","TimelineLite","TimelineMax","TweenMax","Planta","from","this","delay","width","ease","Expo","easeInOut","to","repeat","repeatDelay","left","rotation","yoyo","autoAlpha","Bounce","easeOut","transformOrigin","Power4","opacity","y","scaleY","Elastic","config","className","src","ref","img","Linea","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,mWC+C5BC,E,YArCd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,IAAI,KACT,EAAKC,QAAQ,KACb,EAAKC,QAAQ,KACb,EAAKC,QAAQ,KACb,EAAKC,QAAQ,KACb,EAAKC,aAAe,KACpB,EAAKC,YAAY,KACjB,EAAKC,SAAS,KACd,EAAKC,OAAS,KAVI,E,iFAanBD,IAASE,KAAKC,KAAKR,QAAS,EAAG,CAACS,MAAO,GAAIC,MAAO,EAAGC,KAAMC,IAAKC,YAChER,IAASS,GAAGN,KAAKF,OAAQ,GAAG,CAACS,OAAO,EAAEC,YAAY,EAAEC,KAAK,KAAKC,SAAU,IAAKC,MAAK,EAAKC,UAAW,GAAKT,KAAKU,IAAOC,QAAQC,gBAAgB,YAE3If,KAAKJ,aAAc,IAAIA,KACnBG,KAAKC,KAAKT,QAAS,IADJ,aACUY,KAAKa,IAAOF,QAASG,QAAQ,EAAGC,EAAE,IAD5C,OACqDd,IAAKC,YACzEN,KAAKC,KAAKP,QAAS,IAAK,CAAEU,KAAKa,IAAOF,QAASK,OAAQ,EAAGJ,gBAAiB,aAC3EhB,KAAKC,KAAKN,QAAS,IAAK,CAAES,KAAKa,IAAOF,QAASK,OAAQ,EAAGJ,gBAAiB,aAC3EhB,KAAKC,KAAKV,IAAK,IAAI,CAAC4B,GAAG,IAAKf,KAAKiB,IAAQN,QAAQO,OAAO,IAAK,Q,+BAEvD,IAAD,OACR,OACC,yBAAKC,UAAU,eACd,yBAAKC,IAAKjC,IAAKkC,IAAK,SAAAC,GAAG,OAAI,EAAKnC,IAAMmC,GAAKH,UAAU,oBACrD,yBAAKC,IAAKhC,IAASiC,IAAK,SAAAC,GAAG,OAAI,EAAKlC,QAAUkC,GAAKH,UAAU,wBAC7D,yBAAKC,IAAK/B,IAASgC,IAAK,SAAAC,GAAG,OAAI,EAAKjC,QAAUiC,GAAKH,UAAU,wBAC7D,yBAAKC,IAAK9B,IAAS+B,IAAK,SAAAC,GAAG,OAAI,EAAKhC,QAAUgC,GAAKH,UAAU,wBAC7D,yBAAKC,IAAK7B,IAAS8B,IAAK,SAAAC,GAAG,OAAI,EAAK/B,QAAU+B,GAAKH,UAAU,wBAC7D,yBAAKC,IAAKG,IAAOJ,UAAU,sBAC3B,yBAAKC,IAAKzB,IAAQ0B,IAAK,SAAAC,GAAG,OAAI,EAAK3B,OAAS2B,GAAKH,UAAU,4B,GAhCrCK,aCGXC,MATf,WACE,OACF,6BAEE,kBAAC,EAAD,QCKkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.051bc22f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sol.ffa89cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/Captus1.3c8e9e1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bandeja.f2ed261d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Captus2.2714264e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Captus3.3498f01f.svg\";","module.exports = __webpack_public_path__ + \"static/media/Linea.352c3e5d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Planta.b6b0b749.svg\";","import React, { Component } from \"react\";\r\nimport { TweenMax, TimelineLite,Elastic, TimelineMax,Expo,Power4,Bounce} from \"gsap/all\";\r\nimport Sol from \"../Svg/Elaboracion/Sol.svg\";\r\nimport Captus1 from \"../Svg/Elaboracion/Captus1.svg\";\r\nimport Bandeja from \"../Svg/Elaboracion/Bandeja.svg\";\r\nimport Captus2 from \"../Svg/Elaboracion/Captus2.svg\";\r\nimport Captus3 from \"../Svg/Elaboracion/Captus3.svg\";\r\nimport Linea from \"../Svg/Elaboracion/Linea.svg\";\r\nimport Planta from \"../Svg/Elaboracion/Planta.svg\";\r\nclass Elaboracion extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.Sol=null;\r\n\t\tthis.Captus1=null;\r\n\t\tthis.Bandeja=null;\r\n\t\tthis.Captus2=null;\r\n\t\tthis.Captus3=null;\r\n\t\tthis.TimelineLite = null;\r\n\t\tthis.TimelineMax=null;\r\n\t\tthis.TweenMax=null;\r\n\t\tthis.Planta = null;\r\n\t}\r\n\tcomponentDidMount() {\r\n\tTweenMax.from(this.Bandeja, 1, {delay: 0.6,width: 0, ease: Expo.easeInOut});\r\n\tTweenMax.to(this.Planta, 30,{repeat:2,repeatDelay:5,left:1300,rotation: 360, yoyo:true,autoAlpha: 0.8, ease:Bounce.easeOut,transformOrigin:\"50% 50%\"});\r\n\r\n\tthis.TimelineMax = new TimelineMax()\r\n\t\t\t\t.from(this.Captus1, 1.1,{ ease:Power4.easeOut, opacity:0, y:20, ease:Expo.easeInOut})\r\n\t\t\t\t.from(this.Captus2, 1.2, { ease:Power4.easeOut, scaleY: 0, transformOrigin: '50% 100%' })\r\n\t\t\t\t.from(this.Captus3, 1.3, { ease:Power4.easeOut, scaleY: 0, transformOrigin: '50% 100%' })\r\n\t\t\t\t.from(this.Sol, 1.4,{y:-100, ease:Elastic.easeOut.config(1.1, 0.4)})\t\t\t\t\t\t\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Elaboracion\">\r\n\t\t\t\t<img src={Sol} ref={img => this.Sol = img} className=\"Elaboracion_Sol\" />\r\n\t\t\t\t<img src={Captus1} ref={img => this.Captus1 = img} className=\"Elaboracion_Captus1\"/>\r\n\t\t\t\t<img src={Bandeja} ref={img => this.Bandeja = img} className=\"Elaboracion_Bandeja\"/>\r\n\t\t\t\t<img src={Captus2} ref={img => this.Captus2 = img} className=\"Elaboracion_Captus2\"/>\r\n\t\t\t\t<img src={Captus3} ref={img => this.Captus3 = img} className=\"Elaboracion_Captus3\"/>\r\n\t\t\t\t<img src={Linea} className=\"Elaboracion_Linea\"/>\r\n\t\t\t\t<img src={Planta} ref={img => this.Planta = img} className=\"Elaboracion_Planta\"/>\r\n\t\t\t</div>\r\n\t\r\n\t\t)\r\n\t}\r\n}\r\nexport default Elaboracion;","import React from 'react';\nimport \"./Scss/Index.scss\";\nimport Elaboracion from './Animation/Elaboracion';\nfunction App() {\n  return (\n<div>\n\n\t\t<Elaboracion/>\n\t  </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}